Readme.



Input files:

  -parameters.txt: contains the main configuration parameters for the main code. 
  
  -groups.txt: contains the information on how the participants are to be grouped 

  -num_participants: contains the number of participants to generate.
  
  -num_windows.txt: contains the number of windows to generate

  -gaze_data.dat: contains the eye gaze position for all participants.  
  
  
The main code requires parameters.txt, groups.txt and gaze_data.dat to run. All the other files are auxiliary and are used to generate the gaze_data.dat with synthetic data. 


####################################

To make a run:
  
1) Make any changes needed to parameters.txt  
    Some templates for the four parameter sets (A, B , C and D) used in the paper are provided. 

2) Adjust the number of participants in num_participants.txt, their grouping in groups.txt and the number of windows to simulate in num_windows.txt. (Do not forget to adjust the grouping if the number of participant is changed.) 

3) Run the gaze data generator script by calling:

  python generator_NSS_data.py
  
This script will read in the groups.txt and num_windows.txt files and create the synthetic eye gaze data. 
Note: the data generator script assumes two groups of participants, although the script can be modified if needed because the main code accepts arbitrary groupings of participants. 


4) Run the main code executable





###################################

Output files:

-NSS_score_export.dat
-measured_time.dat

(Other auxiliary files may also be exported for assessment purposes)

The measured times are exported to measured_time.dat. The time written there is the total time for all windows processed. The time given there is shorter than the total execution time because it doesn't consider the initialization routines, nor some final export ones, which are only executed once.  



The scores are exported to NSS_score_export.dat

An example of the output line:
  un-normalized NSS score    single Gaussian score	normalized NSS score		participant 	  	  group	       time 	Monte Carlo iteration   
  35.465962237508009           40.175615623599576       0.88277333618940068                      2                   1           1                    1

The group in the export file is the reference group respect to which the score is calculated, not necesarilly the group the participant belongs to. 
The time index printed out is the first time index of the window being calculated. 


#####################################

Published results:

The times for the calculations in the paper are given in the file results_all_sets.csv.
Each row represents a separate run. 

mc_iters: number of Monte Carlo iterations executed
planar: 1 for 2D, 0 for 3D calculations	
num_windows: number of windows calculated 	
mode_code: specifies in what mode the code will run, which changes the method of calculaation. 1: Grid, 2: Exact, 3: Approximate	
Number of Participants	
Total time (s): Time for calculating all the windows specified in num_windows.  	
Method : Grid, exact, or approximate. It's redundant with mode_code, but more human-readable. 	
Average time (s): Total time divided by the number of windows.
dimensions  : 2D or 3D. It's redundant with planar, but more human-readable.
Type:  specifies the dimensions and method in a single human-readable string
Parameter set: A, B, C or D



The folder run_parameter_set_D is an example with actual input and output files, and also contains the script to generate the synthetic data. 


#####################################

Compiling: 

The Intel MKL library is required, since the code uses the FFTW routines and the random number generators. 

The GNU Fortran compiler was used for the published work, but code is likely to work with other compilers too.  
We employed the NetBeans IDE graphical interface, but it is not required. 

See the file compiler_linker_options.txt for some guidance on compilation options. 

-The folder "makefile" contains the Makefile and some related ones used to generate it. Note: They are provided for guidance purposes. The Makefile was automatically generated by the NetBeans IDE, and we cannot guarantee they will work as it is on other systems.   










